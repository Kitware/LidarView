import os, re, shutil

# Get the LidarView source directory from CMake
sourceDir = "@CMAKE_SOURCE_DIR@"
pcapFolder= sourceDir + "/TestData/"
calibFolder= sourceDir + "/share/"

# Dictionnary containing the different *.pcap and *.xml to generate the baseline data
tests = {
  'HDL-64_Dual-autocalib.pcap' :    { 'xml' : '' },
  'HDL-64_Single-autocalib.pcap' :  { 'xml' : '' },
  'HDL-64_Dual.pcap' :              { 'xml' : 'HDL-64' },
  'HDL-64_Single.pcap' :            { 'xml' : 'HDL-64' },
  'VLP-16_Dual.pcap' :              { 'xml' : 'VLP-16' },
  'VLP-16_Single.pcap' :            { 'xml' : 'VLP-16' },
  'VLP-32c_Dual.pcap' :              { 'xml' : 'VLP-32c' },
  'VLP-32c_Single.pcap' :           { 'xml' : 'VLP-32c' }
}

# Generates *.vtp baseline files from *.pcap
for pcap, conf in tests.iteritems():
  print "Generates baseline *.vtp for pcap: " + pcap[:-5] + " and configuration " + conf['xml']

  baselineFolder = pcapFolder + pcap[:-5]

  # remove old folder
  if os.path.exists(baselineFolder):
    shutil.rmtree(baselineFolder)

  # create new folder
  os.makedirs(baselineFolder)

  calibPath = (calibFolder + "/" + conf['xml'] + ".xml" if conf['xml'] else "")

  reader = vv.smp.VelodyneHDLReader(guiName = 'Data',
                                 FileName = pcapFolder + "/" + pcap,
                                 CalibrationFile = calibPath,
                                 ApplyTransform = False,
                                 NumberOfTrailingFrames = 0)
  reader.GetClientSideObject().ReadFrameInformation()
  w = vv.smp.XMLPPolyDataWriter(FileName = baselineFolder + "/" + pcap[:-5] + ".vtp",
                             Input = reader,
                             Writealltimestepsasfileseries = 1)
  w.UpdatePipeline()

  # Renames file that need to be renamed
  files = os.listdir(baselineFolder)
  files.sort()

  for filename in files:
    pattern = r"_([0-9])_0"
    repl = r'_0\1_0'
    newFilename = re.sub(pattern, repl, filename)
    if filename != newFilename:
      os.rename(baselineFolder + "/" + filename, baselineFolder + "/" + newFilename)

  files = os.listdir(baselineFolder)
  files.sort()

  # Generates a list with the different *.vtp files in alphabetical order
  vtpListPath = baselineFolder + "/" + "files.txt"
  vtpList = open(vtpListPath, "w")

  re.purge()

  for filename in files:
    pattern = r"_[0-9]{2}_0\.vtp"
    if re.search(pattern, filename) > 0:
      vtpList.write("%s\n" % filename)

  # Finally, delete the unused files generated by the reader
  for filename in files:
    pattern = pcap[:-5] + r"_[0-9]+\.vtp"
    if re.search(pattern, filename) > 0:
      os.remove(baselineFolder + "/" + filename)

  vtpList.close()

print "Everything was generated successfully, LidarView will close now."
vv.quit()
