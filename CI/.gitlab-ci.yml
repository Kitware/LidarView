# warning: do not use ':' inside a string that is double-quotes delimited
# else you will have "script config should be an array of strings or a string"
# see also https://stackoverflow.com/questions/43762269/
#
# warning: a script line (starting with '-') must not start with "

# note: on windows runners, ignore "empty cache key" message because
# we do not use gitlab caching.
# See https://gitlab.com/gitlab-org/gitlab-runner/issues/3253"

# this cmake variable are exposed here so schedule jobs can modify them
variables:
  # cmake superbuild option
  cmake_option_USE_SYSTEM_python: "False"
  cmake_option_CMAKE_BUILD_TYPE: "Release"

  # options specific to macOS builds
  cmake_option_CMAKE_OSX_ARCHITECTURES: "x86_64"
  cmake_option_CMAKE_OSX_DEPLOYMENT_TARGET: "10.12"
  cmake_option_CMAKE_OSX_SYSROOT: "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk"

  test_blacklist: "TestLidarStream"
  # it is also possible to use: -DCMAKE_OSX_SDK:STRING=macosx10.12

  slash_separator: "/"

# this are the 4 stage of the continuous integration, the stage are executed one after another
stages:
  - superbuild
  - build
  - test
  - package

# jobs starting with "." are ignored by gitlab-ci, they are used as anchor, which 
# enable to reuse the same code inside multiple jobs. Please see YAML specification
# for more information
.default-cache: &default-cache
  key: ${OS}${slash_separator}${CI_COMMIT_REF_NAME}
  paths:
    - Superbuild-build

.push-cache: &push-cache
  cache:
    <<: *default-cache
    policy: push

################################################################################
### anchor jobs for linux, they will be used accros multiple other jobs
### WARNING do not declare variable as they will overwrite all other variable!!!
################################################################################

.unix_get_superbuild:
  script: &unix_get_superbuild
    - cd ..
    - chmod +x ${CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh
    - ${CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh ${OS} ${CI_COMMIT_REF_NAME} ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY}
    # create a symbolic link
    - cd ${CI_PROJECT_DIR}
    - ln -s ../Superbuild-build Superbuild-build


.window_get_superbuild:
  script: &windows_get_superbuild
    - ABSOLUTE_CI_PROJECT_DIR=$(pwd) # else not absolute on windows + cygwin
    - echo "ABSOLUTE_CI_PROJECT_DIR is ${ABSOLUTE_CI_PROJECT_DIR}"
    - echo "CI_PROJECT_DIR is ${CI_PROJECT_DIR}"
    - cd /cygdrive/c # findRightSuperbuildCache.sh will restore "Superbuild-build" here
    - chmod +x ${ABSOLUTE_CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh
    - ${ABSOLUTE_CI_PROJECT_DIR}/CI/findRightSuperbuildCache.sh ${OS} ${CI_COMMIT_REF_NAME} ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY}
    # create a symbolic link
    - cd ${ABSOLUTE_CI_PROJECT_DIR}
    - export CYGWIN="winsymlinks:nativestrict"
    - ln -s /cygdrive/c/Superbuild-build Superbuild-build

.linux_superbuild: &linux_superbuild
  stage: superbuild
  script:
    - git submodule update --init Superbuild/common-superbuild
    # prepare directory
    - cd ..
    - mkdir Superbuild-build/
    - cd Superbuild-build/
    # configure & generate
    - cmake -DCMAKE_BUILD_TYPE:STRING=${cmake_option_CMAKE_BUILD_TYPE} -DBUILD_TESTING=True
      ${CI_PROJECT_DIR}/Superbuild
    # compile
    - make -j8
    # remove lidarview
    - rm -rf common-superbuild/lidarview
    # - cd ${CI_PROJECT_DIR}
    # create a symbolic link, inside the source tree else "push" will not work
    # - ln -s ../Superbuild-build Superbuild-build # not working witth
    - echo "compressing and uploading Superbuild. This take some time..."
    - cd ..
    - tar zcf archive Superbuild-build/
    - ~/mc config host add superbuild ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY}
    - ~/mc cp archive superbuild/runner/minio/project/808/${cache_patch}/${OS}/${CI_COMMIT_REF_NAME}-1

.linux_superbuild_manual: &linux_superbuild_manual
  when: manual
  <<: *linux_superbuild

.linux_superbuild_schedule: &linux_superbuild_schedule
  <<: *linux_superbuild
  only:
    - schedules

.linux_build: &linux_build
  stage: build
  before_script: *unix_get_superbuild
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8

.linux_test: &linux_test
  stage: test
  before_script: *unix_get_superbuild # you cannot put linux_build here
  script:
    # get test data and baseline
    - git submodule update --init Superbuild/common-superbuild
    - git submodule update --init TestData
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8
    - cd ../Superbuild-build/common-superbuild/lidarview/build
    - cmake . -DBUILD_TESTING=True
    - make
    # excluding packaging test targets (packaging is done later)
    # TODO current Source related tests fails, so we skip them.
    # This need to be fixed !
    - ctest -E "$test_blacklist"

.linux_package: &linux_package
  stage: package
  before_script: *unix_get_superbuild # you cannot put linux_build here
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd ../Superbuild-build/ # created by extracting cache in "unix_get_superbuild"
    - make lidarview -j8
    - ctest -R cpack-lidarview-TGZ -V

.linux_package_manual: &linux_package_manual
  when: manual
  <<: *linux_package
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.tar.gz # Superbuild-build links to ../Superbuild-build
    expire_in: 1 hr

.linux_package_schedule: &linux_package_schedule
  <<: *linux_package
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.tar.gz # Superbuild-build links to ../Superbuild-build
    expire_in: 1 day
  only:
    - schedules

#-------------------------------------------------------------------------------
# jobs for ubunu 16.04
#-------------------------------------------------------------------------------
.ubuntu_16_04: &ubuntu_16_04
  tags:
    - ubuntu_16.04
  variables:
    OS: ubuntu_16.04

ubuntu16.04_superbuild_manual:
  <<: *ubuntu_16_04
  <<: *linux_superbuild_manual

ubuntu16.04_superbuild_schedule:
  <<: *ubuntu_16_04
  <<: *linux_superbuild_schedule

ubuntu16.04_build:
  <<: *ubuntu_16_04
  <<: *linux_build

ubuntu16.04_test:
  <<: *ubuntu_16_04
  <<: *linux_test

ubuntu16.04_package_manual:
  <<: *ubuntu_16_04
  <<: *linux_package_manual

ubuntu16.04_package_schedule:
  <<: *ubuntu_16_04
  <<: *linux_package_schedule

################################################################################
### anchor jobs for OSX, they will be used accros multiple other jobs
################################################################################
# Currently the OSX job are executed in a sheel runner, every folder that is create remain
.OSX_superbuild: &OSX_superbuild
  stage: superbuild
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd ..
    # prepare directory, on OSX as we use the shell executor we need to remove
    # the old directory
    - rm -rf Superbuild-build/
    - mkdir Superbuild-build/
    - cd Superbuild-build/
    # configure & generate
    - cmake -DCMAKE_BUILD_TYPE:STRING=${cmake_option_CMAKE_BUILD_TYPE}
      -DCMAKE_OSX_ARCHITECTURES:STRING=${cmake_option_CMAKE_OSX_ARCHITECTURES}
      -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=${cmake_option_CMAKE_OSX_DEPLOYMENT_TARGET}
      -DCMAKE_OSX_SYSROOT:STRING=${cmake_option_CMAKE_OSX_SYSROOT}
      ${CI_PROJECT_DIR}/Superbuild
    # compile
    - make -j8
    # remove lidarview
    - rm -rf common-superbuild/lidarview
    # upload superbuild, Apple's Zip Utility, which I guess is use by gilab-ci
    # produce corrupted file for large file, so we need to upload the cache manually 
    - cd ..
    - echo "compressing and uploading Superbuild. This take some time..."
    - tar jcf archive Superbuild-build/
    - ~/mc config host add superbuild ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY}
    - ~/mc cp archive superbuild/runner/minio/project/808/${cache_patch}/${OS}/${CI_COMMIT_REF_NAME}-1

.OSX_superbuild_manual: &OSX_superbuild_manual
  # when: manual
  <<: *OSX_superbuild

.OSX_superbuild_schedule: &OSX_superbuild_schedule
  <<: *OSX_superbuild
  only:
    - schedules

.OSX_build: &OSX_build
  stage: build
  before_script: *unix_get_superbuild
  script:
    - cd Superbuild-build/
    - make lidarview -j8
  artifacts:
    paths:
     - Superbuild-build/lidarview
    expire_in: 1 hr

.OSX_test: &OSX_test
  stage: test
  before_script: *unix_get_superbuild
  script:
    - echo "test "

.OSX_package: &OSX_package
  stage: package
  before_script: *unix_get_superbuild
  dependencies: []
  script:
    - cd Superbuild-build
    - make package -j8

.OSX_package_manual: &OSX_package_manual
  # when: manual
  <<: *OSX_package
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.dmg
    expire_in: 1 hr

.OSX_package_schedule: &OSX_package_schedule
  <<: *OSX_package
  artifacts:
    name: ${CI_JOB_NAME}-nightly
    paths:
     - Superbuild-build/*.dmg
    expire_in: 1 day
  only:
    - schedules

#-------------------------------------------------------------------------------
# jobs for OSX ElCapitan
#-------------------------------------------------------------------------------
.OSX_ElCapitan: &OSX_ElCapitan
  tags:
    - OSX_ElCapitan
  variables:
    OS: OSX_ElCapitan

.OSX_ElCapitan_superbuild_manual:
  <<: *OSX_ElCapitan
  <<: *OSX_superbuild_manual

.OSX_ElCapitan_superbuild_schedule:
  <<: *OSX_ElCapitan
  <<: *OSX_superbuild_schedule

.OSX_ElCapitan_build:
  <<: *OSX_ElCapitan
  <<: *OSX_build

.OSX_ElCapitan_test:
  <<: *OSX_ElCapitan
  <<: *OSX_test

.OSX_ElCapitan_package_manual:
  <<: *OSX_ElCapitan
  <<: *OSX_package_manual

.OSX_ElCapitan_package_schedule:
  <<: *OSX_ElCapitan
  <<: *OSX_package_schedule

.windows_superbuild: &windows_superbuild
  stage: superbuild
  tags:
    - windows_10
  variables:
    OS: windows_10
  stage: superbuild
  script:
    - echo "entering superbuild stage"
    - WIN_CI_PROJECT_DIR=$(cygpath -w $(pwd))
    - echo "WIN_CI_PROJECT_DIR is $WIN_CI_PROJECT_DIR"
    - git submodule update --init Superbuild/common-superbuild
    # we want short paths so we build at the root of a drive
    - mkdir /cygdrive/c/Superbuild-build
    - cd /cygdrive/c/Superbuild-build
    # first I tried to do `call [snip]\vcvarsall.bat x86_amd64`
    # but that was not sufficient (even if it was working inside Window's CMD from the VM GUI !)
    # so I ended up dumping all the variables from Window's CMD that is able to build using SET
    # the cmd-env-variables.cmd is used to restore these variables
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > superbuild.bat
    # note that we use forward slashes in Qt5_DIR path (i.e. Unix PATH),
    # else \Q is taken by MSVC as an option
    - echo "cmake $WIN_CI_PROJECT_DIR/Superbuild -GNinja -DCMAKE_BUILD_TYPE:STRING=${cmake_option_CMAKE_BUILD_TYPE} -DBUILD_TESTING=True -DUSE_SYSTEM_qt5=True -DQt5_DIR=\"C:/Qt/Qt5.10.0/5.10.0/msvc2015_64/lib/cmake/Qt5\"" >> superbuild.bat
    - echo "ninja" >> superbuild.bat
    - cat superbuild.bat
    - chmod +x superbuild.bat
    - ./superbuild.bat
    - echo "build terminated"
    - echo "removing common-superbuild/lidarview"
    - rm -rf common-superbuild/lidarview
    - echo "compressing and uploading Superbuild. This take some time..."
    - cd ..
    - tar zcf archive Superbuild-build/
    - /cygdrive/c/mc.exe config host add superbuild ${MINIO_CACHE_SERVER_ADDRESS} ${MINIO_CACHE_SERVER_ACCESS_KEY} ${MINIO_CACHE_SERVER_SECRET_KEY}
    - /cygdrive/c/mc.exe cp archive superbuild/runner/minio/project/808/${cache_patch}/${OS}/${CI_COMMIT_REF_NAME}-1

windows_superbuild_manual: &windows_superbuild_manual
  when: manual
  <<: *windows_superbuild

windows_superbuild_schedule: &windows_superbuild_schedule
  <<: *windows_superbuild
  only:
    - schedules

windows_build:
  stage: build
  before_script: *windows_get_superbuild
  tags:
    - windows_10
  variables:
    OS: windows_10
  stage: build
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd /cygdrive/c/Superbuild-build # provided by windows_get_superbuild
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > build.bat
    - echo "ninja lidarview" >> build.bat
    - chmod +x build.bat
    - ./build.bat

windows_test:
  stage: test
  before_script: *windows_get_superbuild
  tags:
    - windows_10
  variables:
    OS: windows_10
  stage: test
  script:
    - git submodule update --init Superbuild/common-superbuild
    - git submodule update --init TestData
    - cd /cygdrive/c/Superbuild-build # provided by windows_get_superbuild
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > test.bat
    - echo "ninja lidarview" >> test.bat
    - chmod +x test.bat
    - ./test.bat
    - cd common-superbuild/lidarview/build
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > test.bat
    - echo "cmake -DBUILD_TESTING=True ." >> test.bat
    - echo "ninja install" >> test.bat
    - echo "ctest -E \"$test_blacklist\"" >> test.bat
    - chmod +x test.bat
    - ./test.bat

.windows_package: &windows_package
  stage: package
  before_script: *windows_get_superbuild
  tags:
    - windows_10
  variables:
    OS: windows_10
  stage: package
  script:
    - git submodule update --init Superbuild/common-superbuild
    - cd /cygdrive/c/Superbuild-build # provided by windows_get_superbuild
    - echo "call \"C:\\Users\\vagrant\\Desktop\\cmd-env-variables.cmd\"" > package.bat
    - echo "ninja lidarview" >> package.bat
    - echo "ctest -V -R cpack" >> package.bat
    - chmod +x package.bat
    - ./package.bat

windows_package_manual: &windows_package_manual
  when: manual
  <<: *windows_package
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.exe # Superbuild-build links to ../Superbuild-build
     - Superbuild-build/*.zip
    expire_in: 1 hr

windows_package_schedule: &windows_package_schedule
  <<: *windows_package
  artifacts:
    name: ${CI_JOB_NAME}
    paths:
     - Superbuild-build/*.exe # Superbuild-build links to ../Superbuild-build
     - Superbuild-build/*.zip
    expire_in: 1 day
  only:
    - schedules
